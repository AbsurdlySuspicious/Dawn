version: 2.0

config_android: &config_android
  docker:
    - image: circleci/android:api-26-alpha
  working_directory: ~/dank
  environment:
    JAVA_TOOL_OPTIONS: "-Xmx1024m"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false"
    TERM: dumb

update_sdk: &update_sdk
  run:
    name: Update SDK
    command: |
      mkdir "$ANDROID_HOME/licenses" || true
      echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
      echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"
      sdkmanager "platform-tools" "platforms;android-26"

save_cache: &save_cache
  save_cache:
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper
    key: gradle-{{ checksum "app/build.gradle" }}-{{ checksum "markdownhints/build.gradle" }}

restore_cache: &restore_cache
  restore_cache:
    key: gradle-{{ checksum "app/build.gradle" }}-{{ checksum "markdownhints/build.gradle" }}

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/dank

persist_workspace: &persist_workspace
  persist_to_workspace:
    root: .
    paths:
      - ./*/build

workflow_filter_all: &workflow_filter_all
  filters:
    tags:
      only: /.*/

jobs:
  build_debug:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *restore_cache
      - run:
          name: Download Dependencies
          command: ./gradlew dependencies
      - run:
          name: Assemble and Test APKs
          command: ./gradlew bundleDebug assembleDebug
      - <<: *save_cache
      - store_artifacts:
          path: app/build/outputs
          destination: outputs
      - <<: *persist_workspace

  check:
    <<: *config_android
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          name: Check app
          command: ./gradlew check
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  publish_github_release:
    docker:
      - image: circleci/golang:1.8
    steps:
      - <<: *attach_workspace
      - run:
          name: Publish Pre-Release on GitHub
          command: |
            go get github.com/tcnksm/ghr
            DEBUG_APK="Dank_${CIRCLE_TAG}_debug.apk"
            mv ~/dank/app/build/outputs/apk/debug/app-debug.apk ${DEBUG_APK}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ${DEBUG_APK}

workflows:
  version: 2
  build_test_publish:
    jobs:
      - build_debug:
          <<: *workflow_filter_all
#      - check:
#          requires:
#            - build_debug
      - publish_github_release:
          requires:
            - build_debug
          filters:
            tags:
              only: /^\d+\.\d+(\.\d+)?$/
            branches:
              ignore: /.*/
